import numpy as np


class Hopping2D:
    """
    h_r and r(translations) are lists with consistent orders
    """
    def __init__(self, mu, tnn, tnnn):
        self.h_r = []
        self.r = [[0,0],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1],[0,-1],[1,-1]]
        self.n_r = len(self.r)
        
        t, s = tnn, tnnn
        h_r = [{'0':[[-mu,t,t,s],[t,-mu,s,t],[t,s,-mu,t],[s,t,t,-mu]]},
               {'0':[[0,t,0,s],[0,0,0,0],[0,s,0,t],[0,0,0,0]]},
               {'0':[[0,0,0,s],[0,0,0,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,t,s],[0,0,s,t],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,s,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[t,0,s,0],[0,0,0,0],[s,0,t,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,0,0,0],[s,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[t,s,0,0],[s,t,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,s,0,0],[0,0,0,0]]}]
        p3 = np.array([[1,0],[0,-1]]) # particle hole transform dispersion and mu
        u = .5*np.array([[1,1,1,1],[1,-1,1,-1],[1,1,-1,-1],[1,-1,-1,1]]) # K transform
        for i_h, h in enumerate(h_r):
            self.h_r.append({'0': np.kron(p3, u.dot(np.array(h['0'])).dot(u))})


class Hopping3D:
    
    def __init__(self, mu, tnn, tnnn, tz):
        self.h_r = []
        self.r = [[0,0,0],[1,0,0],[1,1,0],[0,1,0],[-1,1,0],[-1,0,0],[-1,-1,0],[0,-1,0],[1,-1,0],[0,0,1],[0,0,-1]]
        self.n_r = len(self.r)
        
        t, s = tnn, tnnn
        h_r = [{'0':[[-mu,t,t,s],[t,-mu,s,t],[t,s,-mu,t],[s,t,t,-mu]]},
               {'0':[[0,t,0,s],[0,0,0,0],[0,s,0,t],[0,0,0,0]]},
               {'0':[[0,0,0,s],[0,0,0,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,t,s],[0,0,s,t],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,s,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[t,0,s,0],[0,0,0,0],[s,0,t,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,0,0,0],[s,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[t,s,0,0],[s,t,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,s,0,0],[0,0,0,0]]},
               {'0':[[tz,0,0,0],[0,tz,0,0],[0,0,tz,0],[0,0,0,tz]]},
               {'0':[[tz,0,0,0],[0,tz,0,0],[0,0,tz,0],[0,0,0,tz]]}]
        p3 = np.array([[1,0],[0,-1]]) # particle hole transform dispersion and mu
        u = .5*np.array([[1,1,1,1],[1,-1,1,-1],[1,1,-1,-1],[1,-1,-1,1]]) # K transform
        for i_h, h in enumerate(h_r):
            self.h_r.append({'0': np.kron(p3, u.dot(np.array(h['0'])).dot(u))})


class Hopping3DAndersen:
    """
    complex interlayer coupling preserving the lattice symmetry
    """
    def __init__(self, mu, tnn, tnnn, tz):
        self.h_r = []
        self.r = [[0,0,0],[1,0,0],[1,1,0],[0,1,0],[-1,1,0],[-1,0,0],[-1,-1,0],[0,-1,0],[1,-1,0],
                        [0,0,1],[0,0,-1],
                        [1,1,1],[1,1,-1],[-1,1,1],[-1,1,-1],[-1,-1,1],[-1,-1,-1],[1,-1,1],[1,-1,-1],
                        [1,0,-1],[1,0,1],[0,1,-1],[0,1,1],[-1,0,-1],[-1,0,1],[0,-1,-1],[0,-1,1]]
        self.n_r = len(self.r)
        t, s = tnn, tnnn
        u,v,w = tz, tz/4., -tz/2.
        h_r = [{'0':[[-mu,t,t,s],[t,-mu,s,t],[t,s,-mu,t],[s,t,t,-mu]]},
               {'0':[[0,t,0,s],[0,0,0,0],[0,s,0,t],[0,0,0,0]]},
               {'0':[[0,0,0,s],[0,0,0,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,t,s],[0,0,s,t],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,s,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[t,0,s,0],[0,0,0,0],[s,0,t,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,0,0,0],[s,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[t,s,0,0],[s,t,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,s,0,0],[0,0,0,0]]},
               
               {'0':[[u,0,0,w],[0,u,w,0],[0,w,u,0],[w,0,0,u]]},
               {'0':[[u,0,0,w],[0,u,w,0],[0,w,u,0],[w,0,0,u]]},
               
               {'0':[[0,0,0,w],[0,0,0,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,w],[0,0,0,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,w,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,w,0],[0,0,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,0,0,0],[w,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,0,0,0],[w,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,w,0,0],[0,0,0,0]]},
               {'0':[[0,0,0,0],[0,0,0,0],[0,w,0,0],[0,0,0,0]]},

               {'0':[[v,0,0,w],[0,v,0,0],[0,w,v,0],[0,0,0,v]]},
               {'0':[[v,0,0,w],[0,v,0,0],[0,w,v,0],[0,0,0,v]]},
               {'0':[[v,0,0,w],[0,v,w,0],[0,0,v,0],[0,0,0,v]]},
               {'0':[[v,0,0,w],[0,v,w,0],[0,0,v,0],[0,0,0,v]]},
               {'0':[[v,0,0,0],[0,v,w,0],[0,0,v,0],[w,0,0,v]]},
               {'0':[[v,0,0,0],[0,v,w,0],[0,0,v,0],[w,0,0,v]]},
               {'0':[[v,0,0,0],[0,v,0,0],[0,w,v,0],[w,0,0,v]]},
               {'0':[[v,0,0,0],[0,v,0,0],[0,w,v,0],[w,0,0,v]]}
        ]
        p3 = np.array([[1,0],[0,-1]]) # particle hole transform dispersion and mu
        u = .5*np.array([[1,1,1,1],[1,-1,1,-1],[1,1,-1,-1],[1,-1,-1,1]]) # K transform
        for i_h, h in enumerate(h_r):
            self.h_r.append({'0': np.kron(p3, u.dot(np.array(h['0'])).dot(u))})
